#user  nobody;
worker_processes  1;

error_log  logs/error.log;
error_log  logs/debug.log  debug;

#pid        logs/nginx.pid;

events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  text/html;
	charset utf-8;
    sendfile        on;
    keepalive_timeout  65;
	
	resolver 8.8.8.8;
	
	upstream default_upstream {
        server localhost:8080;
    }
	
	#----------------------------rainbow configuration-----------------------------
    #lua_package_path '/usr/local/lua/?.lua;;';
    lua_package_path '/Users/liu/Desktop/nginx_code/ngx_lua/?.lua;;';
    lua_code_cache on;
		
	lua_shared_dict shared_ip_blacklist 1m; #定义ip_blacklist 本地缓存变量
		
	init_by_lua_block {
        local waf = require("ngx_waf.waf")

        context = {
            waf = waf
        }
    }

    init_worker_by_lua_block {
        local waf = context.waf
        waf.init_worker()
    }
	
    server {
        listen       80;
        #server_name  www.server1.com;
		
		location = /favicon.ico {
            log_not_found off;
            access_log off;
        }
		
		location / {
            set $upstream_host $host;
            set $upstream_url 'http://default_upstream';

            rewrite_by_lua_block {
                local waf = context.waf
                waf.redirect()
                waf.rewrite()
            }

            access_by_lua_block {
                local waf = context.waf
                waf.access()
            }

            # proxy
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Scheme $scheme;
            proxy_set_header Host $upstream_host;
            proxy_pass $upstream_url;


            header_filter_by_lua_block {
                local waf = context.waf
                waf.header_filter()
            }

            body_filter_by_lua_block {
                local waf = context.waf
                waf.body_filter()
            }

            log_by_lua_block {
                local waf = context.waf
                waf.log()
            }
        }
    }
	
	server {  
        listen 8080;  
  
        location /world {  
			content_by_lua_block {
				ngx.say("hello world");
			}
        }  
    }  
}
